# LinuC Level 1 学習ログ | 2025年7月13日

## 🎯 本日の学習サマリー

昨日に引き続き、Linuxの根幹であるパッケージ管理について、さらに一歩踏み込んだ学習を行った。高レベル・低レベルツールの役割分担という基本を土台に、より実践的な運用管理技術を学んだ。

- リポジトリ管理の仕組み (`/etc/yum.repos.d/`, `/etc/apt/sources.list`)
- あるファイルがどのパッケージに属しているかを特定する方法
- 特定のパッケージを意図的に更新から除外する「バージョンロック」

---

## 🤔 テーマ別：学びと考察

### 1. リポジトリ管理の仕組み

- **昨日の理解と課題:**
  `yum` や `apt` がリポジトリからパッケージを取得することは理解したが、「では、そのリポジトリの場所はどこに定義されているのか？」という具体的な仕組みまでは分かっていなかった。

- **新たな学びと応用:**
  リポジトリの定義ファイルが格納されている場所を明確に理解した。
  - **Red Hat系 (`yum`/`dnf`):** `/etc/yum.repos.d/` ディレクトリ配下に、`.repo` という拡張子のファイルでリポジトリごとに管理されている。
  - **Debian系 (`apt`):** `/etc/apt/sources.list` ファイル、および `/etc/apt/sources.list.d/` ディレクトリ配下の `.list` ファイルに記載されている。
  サードパーティ製のソフトウェアを追加したい場合、公式リポジトリには存在しないことが多い。その際、提供元が用意しているリポジトリ情報をこのディレクトリに正しく配置することで、`yum`や`apt`の管理下に置くことができる。
  **【応用】** EC2のAmazon Linux 2で、標準リポジトリにない最新の開発ツールを使いたい場合、EPEL (Extra Packages for Enterprise Linux) のような追加リポジトリを導入する必要がある。その際、この仕組みを理解していれば、`epel-release`パッケージが何をしているのか（`/etc/yum.repos.d/epel.repo`を配置している）を把握した上で、安全にリポジトリを追加できる。

### 2. ファイルから所属パッケージを特定する逆引き

- **以前の理解と課題:**
  システム内にある実行ファイルや設定ファイルを見つけたとき、「これは一体どのパッケージをインストールした時に入ったものなのか？」を調べる方法を知らなかった。そのため、不要なファイルを安易に消してしまい、システムを不安定にさせるリスクがあった。

- **新たな学びと応用:**
  ファイルパスから、そのファイルを含むパッケージを特定する「逆引き」コマンドを学んだ。
  - **Red Hat系:** `rpm -qf [ファイルパス]`
  - **Debian系:** `dpkg -S [ファイルパス]`
  例えば `rpm -qf /bin/ls` と実行すると、`ls` コマンドが `coreutils` パッケージの一部であることが分かる。これは、トラブルシューティングやセキュリティ監査において極めて強力な武器になる。
  **【応用】** EC2インスタンスの `/usr/sbin` 配下に見慣れないファイルがあった場合、まずこのコマンドで正規のパッケージに含まれるものかを確認する。もしどのパッケージにも属していなければ、手動で置かれたか、あるいは不正に設置された可能性を疑うことができる。

### 3. パッケージのバージョンロック

- **以前の理解と課題:**
  `yum update` や `apt upgrade` を実行すると、全てのパッケージが最新版に更新されて便利だと感じていた。しかし、「特定のアプリケーションが、あるライブラリの特定バージョンに依存している場合、勝手に更新されると困るのでは？」という疑問があった。

- **新たな学びと応用:**
  特定のパッケージを意図的に更新対象から除外する「バージョンロック（またはホールド）」の仕組みを知った。
  - **Red Hat系:** `yum-plugin-versionlock` を使い、`yum versionlock add [パッケージ名]` でロックする。
  - **Debian系:** `apt-mark hold [パッケージ名]` で更新を保留する。
  これにより、「OS全体のセキュリティパッチは適用したいが、このアプリケーションサーバー（例: `httpd`）のバージョンは、検証が済むまで固定しておきたい」という、本番環境で必須となる安定運用が可能になる。
  **【応用】** 本番稼働中のEC2サーバーで、不用意な `yum update -y` を実行してサービスを停止させてしまう、というのは典型的な障害パターン。重要なパッケージ（カーネル、ミドルウェア等）をバージョンロックしておくことで、このような人為的ミスを防ぎ、システムの安定性を大幅に高めることができる。

---

## 🚀 次のアクション

- EC2のAmazon Linux 2インスタンスに `yum install yum-plugin-versionlock` を実行し、`yum versionlock add httpd` のようにWebサーバーをロックする。その後、`yum update` を実行して `httpd` が更新対象から除外されることを確認する。
- `/bin/cat` や `/etc/hosts` など、身近なファイルの所属パッケージを `rpm -qf` や `dpkg -S` で調べてみる。
- `/etc/yum.repos.d/` ディレクトリの中身を `cat` や `less` で覗いてみて、リポジトリのURLやGPGキーの場所などがどのように記述されているかを確認する。s